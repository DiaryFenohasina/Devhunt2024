{"ast":null,"code":"import { backServer } from \"@/config/axiosConfig\";\nimport { io } from \"socket.io-client\";\nimport sary from '@/assets/images/avatar.png';\nimport { bot } from '@/assets/images/index';\nexport default {\n  data() {\n    return {\n      bot,\n      picture: sary,\n      index: -1,\n      id: parseInt(localStorage.getItem(\"id\")),\n      username: localStorage.getItem(\"username\"),\n      panel: 'ChatBot',\n      user: {},\n      room: [],\n      users: [{\n        id: 0,\n        username: 'RAMANANTSOA Rotsiniaina'\n      }, {\n        id: 1,\n        username: 'RATSIMBAZAFY Tojoniaina Mbola Safidy'\n      }],\n      connectedUsers: [],\n      newMessage: null,\n      messages: [{\n        UserId: 1,\n        msg: 'hello'\n      }, {\n        UserId: 0,\n        msg: 'hello'\n      }],\n      socket: null\n    };\n  },\n  created() {\n    // this.socketConnect()\n    // this.getUsers()\n  },\n  updated() {},\n  beforeDestroy() {\n    //   this.disconnect()\n  },\n  methods: {\n    isOnline(index) {\n      // console.log(index)\n      // console.log(this.connectedUsers)\n      const online = this.connectedUsers.find(user => user.UserId === index);\n      if (online) return true;\n      return false;\n    },\n    selectPanel(x) {\n      this.panel = x;\n    },\n    getUsers() {\n      backServer.get(`/getUsers/${this.id}`).then(res => {\n        this.users = [...res.data.user];\n      }).catch(err => {\n        console.log(err);\n      });\n    },\n    selectUser(ind) {\n      this.user = this.users.find(user => user.id === ind);\n      this.index = ind;\n      //   this.joinRoom(ind)\n      //   this.setRoom(ind)\n      //   this.getMessages()\n    },\n    socketConnect() {\n      // socket : io.connect(\"http://192.168.43.19:4001\")\n\n      this.socket = io(\"http://127.0.0.1:5000\");\n      this.socket.emit('status', {\n        username: this.username,\n        UserId: this.id\n      });\n      this.socket.on('connectedUser', user => {\n        this.connectedUsers = [...this.connectedUsers, ...user];\n      });\n    },\n    joinRoom(anotherID) {\n      this.socket.emit('join', `${this.id}--with--${anotherID}`);\n    },\n    getMessages() {\n      this.messages = [];\n      backServer.get(`/getMessage/${this.room}`).then(res => {\n        this.messages = [...res.data.msg];\n      });\n      this.socket.on('receiveMessage', message => {\n        this.messages = [...this.messages, message];\n      });\n    },\n    sendMessage() {\n      if (!this.newMessage) return;\n      let msg = {\n        UserId: this.id,\n        msg: this.newMessage,\n        room: this.room\n      };\n      backServer.post('/sendMessage', msg).then(res => {\n        if (res.data.message == 'message stored') {\n          this.socket.emit('sendMessage', res.data.msg);\n          this.messages = [...this.messages, res.data.msg];\n        }\n      }).catch(err => {\n        console.log(err);\n      });\n      this.newMessage = '';\n    },\n    setRoom(id) {\n      let data = new Array(this.id, id);\n      let unique = [...new Set(data)].sort((a, b) => a < b ? -1 : 1);\n      this.room = `${unique[0]}--with--${unique[1]}`;\n    },\n    disconnect() {\n      this.socket.emit('leave', this.id);\n      this.socket.disconnect();\n    }\n  }\n};","map":{"version":3,"names":["backServer","io","sary","bot","data","picture","index","id","parseInt","localStorage","getItem","username","panel","user","room","users","connectedUsers","newMessage","messages","UserId","msg","socket","created","updated","beforeDestroy","methods","isOnline","online","find","selectPanel","x","getUsers","get","then","res","catch","err","console","log","selectUser","ind","socketConnect","emit","on","joinRoom","anotherID","getMessages","message","sendMessage","post","setRoom","Array","unique","Set","sort","a","b","disconnect"],"sources":["src/views/Discussion.vue"],"sourcesContent":["<template>\n  <section class=\"pt-5\">\n    <div class=\"container shadow section-sm rounded min-Height\">\n      <div class=\"row\">\n        <div class=\"sideChat col-lg-1\">\n            <ul>\n                <li class=\"d-flex sidelist c-type\" @click=\"selectPanel('ChatBot')\">\n                    <img :src=\"bot\" class=\"mb-4 text-\" :class=\"panel === 'ChatBot'? 'card-icon-Tools-active' : 'card-icon-Tools'\" alt=\"\">\n                </li>\n                <li class=\"d-flex sidelist c-type\"  @click=\"selectPanel('Personne')\">\n                    <i class=\"mb-4 ti-heart\" :class=\"panel === 'Personne'? 'card-icon-Tools-active' : 'card-icon-Tools'\"></i>\n                </li>\n                <li class=\"d-flex sidelist c-type\" @click=\"selectPanel('Mentor')\">\n                    <i class=\"mb-4 ti-heart\" :class=\"panel === 'Mentor'? 'card-icon-Tools-active' : 'card-icon-Tools'\"></i>\n                </li>\n            </ul>\n        </div>\n        <div class=\"col-lg-4 px-4\">\n            <h3 class=\"mb-5\">Discussion</h3>\n            <div class=\"d-flex search-div mb-4 shadow-input \">\n                <input type=\"text\" class=\"ps-3 flex-grow-1 search-input me-auto text-left\">\n                <button type=\"submit\" class=\"search-btn pe-3\"><i class=\"ti-search h5\"></i></button>\n            </div>\n          <ul class=\"p-2\" :class=\"index == user.id ? 'rounded-user-msg-active' : 'rounded-user-msg'\" v-for=\"user in users\" :key=\"user.id\">\n            <div class=\"d-flex align-items-center c-type user-msg\">\n                <div><img :src=\"picture\" alt=\"Avatar\" class=\" rounded-circle avatar-msg\" ></div>\n                <div class=\"mx-3 flex-grow-1 text-left\">\n                    <li class=\"user-msg\" @click=\"selectUser(user.id)\">{{user.username}}</li>\n                    <li class=\"me-auto text-light\">Message</li>\n                </div>\n                <div v-if=\"isOnline(user.id)\" class=\"online\"></div>\n            </div>\n          </ul>\n        </div>\n        <div class=\"col-lg-7 align-items-center\">\n          <div class=\"me-5 message\">\n\n               <!-- USER TO CHAT -->\n              <!-- v-if=\"user.username\" -->\n                <div >\n                  <div  class=\"rounded-5 d-flex align-items-center shadow p-2 mb-4 \" style=\"height:50px\">\n                    <div><img :src=\"picture\" alt=\"Avatar\" class=\" rounded-circle avatar-msg-clicked\" ></div><strong class=\"ms-3 d-flex \">{{user.username}}</strong>  \n                  </div>\n\n                  <!-- CHAT MESSAGE -->\n                  <div class=\" rounded-5 mb-3 bg-light \">\n                    <ul  class=\"px-3 card-message  list-group rounded-5 \">\n                      \n                      <li v-for=\"(message, index) in messages\" :key=\"index\" :class=\"{'mt-4' : index == 0}\" >\n                        <p class=\" message-font shadow\" :class=\"[ message.UserId == id ? 'float-end chat-l' : 'chat-r'  ]\">\n                          {{ message.msg }}\n                          <!-- <small>:{{ message.id}}</small>  -->\n                          \n                        </p>\n                      </li>\n                    </ul>\n                    <div class=\"search-wrapper align-items-center d-sm-flex \" style=\"background:#fff;\">\n                        <input id=\"search-by\" name=\"s\" type=\"text\" class=\"form-control form-control-sm\" placeholder=\"Your message here\" style=\"width:100%; background:transparent\" v-model=\"newMessage\" @keypress.enter=\"sendMessage\">\n                        <input type=\"submit\" class=\"btn btn-primary btn-sm\" value=\"Send\" @click=\"sendMessage\">\n                    </div>\n                  </div>\n                </div>\n\n                <!-- v-else -->\n              <div class=\"text-center\">\n                <p  class=\"message\" >Choose an user to chat</p>\n              </div>\n             \n            </div>\n        </div>\n      </div>\n    </div>\n  </section>\n</template>\n<script>\nimport { backServer } from \"@/config/axiosConfig\";\nimport { io }  from \"socket.io-client\"\nimport sary from '@/assets/images/avatar.png'\nimport {bot} from '@/assets/images/index'\n\nexport default {\n  data() {\n    return {\n        bot,\n        picture: sary,\n      index: -1,\n      id: parseInt(localStorage.getItem(\"id\")),\n      username: localStorage.getItem(\"username\"),\n      panel:'ChatBot',\n      user:{},\n      room : [],\n      users: [\n        {\n            id: 0,\n            username: 'RAMANANTSOA Rotsiniaina'\n        },\n        {\n            id: 1,\n            username: 'RATSIMBAZAFY Tojoniaina Mbola Safidy'\n        }\n\n        ],\n      connectedUsers: [],\n      newMessage: null,\n      messages: [\n        {\n            UserId: 1,\n            msg : 'hello'\n        },\n        {\n            UserId: 0,\n            msg : 'hello'\n        }\n      ],\n      socket: null\n      \n    };\n  },\n  created() {\n    // this.socketConnect()\n    // this.getUsers()\n  },\n  updated(){\n  },  \n  beforeDestroy()\n  {\n    //   this.disconnect()\n  },\n  methods: {\n    isOnline(index)\n    {\n      // console.log(index)\n      // console.log(this.connectedUsers)\n      const online = this.connectedUsers.find((user) => user.UserId === index)\n      if(online) return true\n\n      return false\n    },\n    selectPanel(x)\n    {\n        this.panel = x\n    },\n    getUsers() {\n      backServer\n        .get(`/getUsers/${this.id}`)\n        .then( (res) => {\n           this.users =  [...res.data.user];\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    },\n    selectUser(ind) {\n      this.user = this.users.find((user) => user.id === ind )\n      this.index = ind;\n    //   this.joinRoom(ind)\n    //   this.setRoom(ind)\n    //   this.getMessages()\n      \n    },\n    socketConnect(){\n      \n      // socket : io.connect(\"http://192.168.43.19:4001\")\n\n      this.socket = io(\"http://127.0.0.1:5000\")\n      this.socket.emit('status',{username: this.username, UserId:this.id})\n      this.socket.on('connectedUser', (user) => {\n        this.connectedUsers = [...this.connectedUsers, ...user]\n      })\n    },\n    joinRoom(anotherID){\n      this.socket.emit('join', `${this.id}--with--${anotherID}`)\n    },\n    getMessages(){\n      this.messages = []\n      \n      backServer.get(`/getMessage/${this.room}`)\n      .then(res => {\n        this.messages = [...res.data.msg];\n\n      })\n\n      this.socket.on('receiveMessage',(message) => {\n        this.messages = [...this.messages, message]\n      })\n    },\n    sendMessage()\n    {\n      if(!this.newMessage) return\n\n      let msg = {UserId : this.id, msg: this.newMessage, room: this.room}\n        backServer.post('/sendMessage',msg)\n        .then(res => {\n          if(res.data.message == 'message stored'){\n            this.socket.emit('sendMessage', res.data.msg)\n            this.messages = [...this.messages, res.data.msg]\n          }\n        })\n        .catch(err => {\n          console.log(err)\n        })\n      this.newMessage = ''\n\n    },\n    setRoom(id)\n    {\n      let data = new Array(this.id,id)\n      let unique = [...new Set(data)].sort((a, b) => (a < b ? -1 : 1));\n\n      this.room = `${unique[0]}--with--${unique[1]}`\n    },\n    disconnect()\n    {\n      this.socket.emit('leave', this.id)\n      this.socket.disconnect()\n    },\n  },\n  \n};\n</script>\n<style scoped>\n    .rounded-5{\n        border-radius: 5px !important;\n    }\n    .message{\n        position: relative;\n        top: 50%;\n        left: 50%;\n        transform: translate(-50%, -50%);\n        font-size: 16px;\n    }\n    .message-font{\n        font-size: 13px;\n    }\n    .min-Height{\n\n        min-height: 800px;\n        max-height: 800px;\n    }\n    .message-panel{\n        min-height: 700px;\n        max-height: 700px;\n    }\n    .card-message{\n        min-height: 560px;\n        max-height: 560px;\n        overflow-y: scroll;\n        \n    }\n    .chat-r{\n        \n        border-top-right-radius: 15px;\n        border-bottom-left-radius: 15px;\n        border-bottom-right-radius: 15px;\n        background: #cacaca;\n        padding-top: 5px;\n        padding-bottom: 5px;\n        padding-left: 10px;\n        padding-right: 10px;\n        max-width: 300px;\n        \n    }\n    .chat-l{\n        \n        border-top-left-radius: 15px;\n        border-bottom-left-radius: 15px;\n        border-bottom-right-radius: 15px;\n        background: #ffffff;\n        padding-top: 5px;\n        padding-bottom: 5px;\n        padding-left: 10px;\n        padding-right: 10px;\n        max-width: 300px;\n        \n    }\n    .online{\n        width: 8px;\n        height: 8px;\n        border-radius:50px;\n        background-color: rgb(3, 173, 26);\n    }\n    .sideChat{\n        border-right:1px solid #E2E2E2;\n    }\n    .active{\n        color: var(--baseColor);\n    }\n    .card-icon-Tools-active {\n        background: var(--baseColor);\n        color: #fff;\n        height: 55px;\n        width: 60px;\n        line-height: 55px;\n        text-align: center;\n        font-size: 27px;\n        display: block;\n        border-radius: 12px !important;\n    }\n    .card-icon-Tools:hover {\n        background: var(--baseColor);\n        color: #fff;\n        height: 55px;\n        width: 60px;\n        line-height: 55px;\n        text-align: center;\n        font-size: 27px;\n        display: block;\n        border-radius: 12px !important;\n    }\n    .card-icon-Tools {\n        /* backgrounrgb(148, 148, 148)2E2; */\n        color: #5c5c5c;\n        height: 55px;\n        width: 60px;\n        line-height: 55px;\n        text-align: center;\n        font-size: 27px;\n        display: block;\n        border-radius: 12px !important;\n    }\n    .search-div{\n        /* border: 1px solid #5c5c5c; */\n        \n        height: 45px;\n        border-radius: 25px;\n        background: #ffffff;\n    }\n    .search-input{\n        background: transparent;\n        border: 0;\n    }\n    .search-input:focus{\n        outline: 0;\n    }\n    .search-btn{\n        background: transparent;\n        border: 0;\n    }\n    .shadow-input{\n        box-shadow: 10px 9px 60px rgba(62, 62, 62, 0.102) !important;\n    }\n    .avatar-msg{\n        max-width: 50px;\n        min-width: 50px;\n    }\n    .avatar-msg-clicked{\n        max-width: 40px;\n        min-width: 40px;\n    }\n    .user-message{\n        position: relative;\n        margin-left: 1cm;\n    }\n    .rounded-user-msg-active{\n        background: #1cdd4c69;\n        color: #000;\n        border-radius: 12px !important;\n    }\n    .rounded-user-msg:hover{\n        background: #1cdd4c69;\n        border-radius: 12px !important;\n    }\n</style>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}