{"ast":null,"code":"export default {\n  data() {\n    return {\n      loading: true,\n      error: null,\n      position: null\n    };\n  },\n  mounted() {\n    this.getPosition();\n  },\n  methods: {\n    getPosition() {\n      // Vérifier si le navigateur prend en charge la géolocalisation\n      if (navigator.geolocation) {\n        // Demander la position actuelle de l'utilisateur\n        navigator.geolocation.getCurrentPosition(position => {\n          // Récupérer les coordonnées de la position\n          this.position = {\n            latitude: position.coords.latitude,\n            longitude: position.coords.longitude\n          };\n          this.loading = false;\n        }, error => {\n          // En cas d'erreur lors de la récupération de la position\n          this.error = \"Erreur de géolocalisation : \" + error.message;\n          this.loading = false;\n        });\n      } else {\n        // Le navigateur ne prend pas en charge la géolocalisation\n        this.error = \"La géolocalisation n'est pas prise en charge par ce navigateur.\";\n        this.loading = false;\n      }\n    },\n    initMap() {\n      // Créer la carte Leaflet avec une vue centrée sur votre position\n      const map = L.map('map').setView([0, 0], 13);\n\n      // Ajouter une couche de carte (par exemple, OpenStreetMap)\n      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n        attribution: '© OpenStreetMap contributors'\n      }).addTo(map);\n\n      // Récupérer la position actuelle de l'utilisateur\n      navigator.geolocation.getCurrentPosition(position => {\n        const {\n          latitude,\n          longitude\n        } = position.coords;\n\n        // Créer un marqueur pour la position actuelle\n        const marker = L.marker([latitude, longitude]).addTo(map);\n\n        // Ajouter un popup au marqueur pour afficher des informations supplémentaires\n        marker.bindPopup('Votre position actuelle').openPopup();\n\n        // Centrer la carte sur la position de l'utilisateur\n        map.setView([latitude, longitude], 13);\n      }, error => {\n        console.error('Erreur de géolocalisation : ', error.message);\n      });\n    }\n  }\n};","map":{"version":3,"names":["data","loading","error","position","mounted","getPosition","methods","navigator","geolocation","getCurrentPosition","latitude","coords","longitude","message","initMap","map","L","setView","tileLayer","attribution","addTo","marker","bindPopup","openPopup","console"],"sources":["src/views/MappingView.vue"],"sourcesContent":["<template>\n    <div>\n        <h1>Position Géographique Actuelle</h1>\n        <p v-if=\"loading\">Récupération de la position en cours...</p>\n        <p v-if=\"error\">{{ error }}</p>\n        <p v-if=\"position\">\n            Latitude: {{ position.latitude }}<br>\n            Longitude: {{ position.longitude }}\n        </p>\n        <div id=\"map\"></div>\n    </div>\n</template>\n\n<script src=\"https://cdn.jsdelivr.net/npm/vue@2\"></script>\n\n<script>\nexport default{\n    data(){\n        return {\n            loading: true,\n            error: null,\n            position: null\n        }\n    },\n    mounted(){\n        this.getPosition()\n    },\n    methods : {\n        getPosition(){\n            // Vérifier si le navigateur prend en charge la géolocalisation\n            if (navigator.geolocation) {\n                // Demander la position actuelle de l'utilisateur\n                navigator.geolocation.getCurrentPosition(\n                    (position) => {\n                        // Récupérer les coordonnées de la position\n                        this.position = {\n                            latitude: position.coords.latitude,\n                            longitude: position.coords.longitude\n                        };\n                        this.loading = false;\n                    },\n                    (error) => {\n                        // En cas d'erreur lors de la récupération de la position\n                        this.error = \"Erreur de géolocalisation : \" + error.message;\n                        this.loading = false;\n                    }\n                );\n            } else {\n                // Le navigateur ne prend pas en charge la géolocalisation\n                this.error = \"La géolocalisation n'est pas prise en charge par ce navigateur.\";\n                this.loading = false;\n            }\n        },\n        initMap() {\n          // Créer la carte Leaflet avec une vue centrée sur votre position\n          const map = L.map('map').setView([0, 0], 13);\n\n          // Ajouter une couche de carte (par exemple, OpenStreetMap)\n          L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n            attribution: '© OpenStreetMap contributors',\n          }).addTo(map);\n\n          // Récupérer la position actuelle de l'utilisateur\n          navigator.geolocation.getCurrentPosition(\n            (position) => {\n              const { latitude, longitude } = position.coords;\n\n              // Créer un marqueur pour la position actuelle\n              const marker = L.marker([latitude, longitude]).addTo(map);\n\n              // Ajouter un popup au marqueur pour afficher des informations supplémentaires\n              marker.bindPopup('Votre position actuelle').openPopup();\n\n              // Centrer la carte sur la position de l'utilisateur\n              map.setView([latitude, longitude], 13);\n            },\n            (error) => {\n              console.error('Erreur de géolocalisation : ', error.message);\n            }\n          );\n        },\n        \n    }\n}\n</script>\n\n<style scoped>\n\n</style>"],"mappings":"AAgBA;EACAA,KAAA;IACA;MACAC,OAAA;MACAC,KAAA;MACAC,QAAA;IACA;EACA;EACAC,QAAA;IACA,KAAAC,WAAA;EACA;EACAC,OAAA;IACAD,YAAA;MACA;MACA,IAAAE,SAAA,CAAAC,WAAA;QACA;QACAD,SAAA,CAAAC,WAAA,CAAAC,kBAAA,CACAN,QAAA;UACA;UACA,KAAAA,QAAA;YACAO,QAAA,EAAAP,QAAA,CAAAQ,MAAA,CAAAD,QAAA;YACAE,SAAA,EAAAT,QAAA,CAAAQ,MAAA,CAAAC;UACA;UACA,KAAAX,OAAA;QACA,GACAC,KAAA;UACA;UACA,KAAAA,KAAA,oCAAAA,KAAA,CAAAW,OAAA;UACA,KAAAZ,OAAA;QACA,CACA;MACA;QACA;QACA,KAAAC,KAAA;QACA,KAAAD,OAAA;MACA;IACA;IACAa,QAAA;MACA;MACA,MAAAC,GAAA,GAAAC,CAAA,CAAAD,GAAA,QAAAE,OAAA;;MAEA;MACAD,CAAA,CAAAE,SAAA;QACAC,WAAA;MACA,GAAAC,KAAA,CAAAL,GAAA;;MAEA;MACAR,SAAA,CAAAC,WAAA,CAAAC,kBAAA,CACAN,QAAA;QACA;UAAAO,QAAA;UAAAE;QAAA,IAAAT,QAAA,CAAAQ,MAAA;;QAEA;QACA,MAAAU,MAAA,GAAAL,CAAA,CAAAK,MAAA,EAAAX,QAAA,EAAAE,SAAA,GAAAQ,KAAA,CAAAL,GAAA;;QAEA;QACAM,MAAA,CAAAC,SAAA,4BAAAC,SAAA;;QAEA;QACAR,GAAA,CAAAE,OAAA,EAAAP,QAAA,EAAAE,SAAA;MACA,GACAV,KAAA;QACAsB,OAAA,CAAAtB,KAAA,iCAAAA,KAAA,CAAAW,OAAA;MACA,CACA;IACA;EAEA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}