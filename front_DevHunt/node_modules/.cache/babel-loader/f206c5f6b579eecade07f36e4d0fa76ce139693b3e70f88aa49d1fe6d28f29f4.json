{"ast":null,"code":"export default {\n  data() {\n    return {\n      loading: true,\n      error: null,\n      position: null\n    };\n  },\n  mounted() {\n    this.getPosition();\n  },\n  methods: {\n    getPosition() {\n      // Vérifier si le navigateur prend en charge la géolocalisation\n      if (navigator.geolocation) {\n        // Demander la position actuelle de l'utilisateur\n        navigator.geolocation.getCurrentPosition(position => {\n          // Récupérer les coordonnées de la position\n          this.position = {\n            latitude: position.coords.latitude,\n            longitude: position.coords.longitude\n          };\n          this.loading = false;\n        }, error => {\n          // En cas d'erreur lors de la récupération de la position\n          this.error = \"Erreur de géolocalisation : \" + error.message;\n          this.loading = false;\n        });\n      } else {\n        // Le navigateur ne prend pas en charge la géolocalisation\n        this.error = \"La géolocalisation n'est pas prise en charge par ce navigateur.\";\n        this.loading = false;\n      }\n    },\n    initMap() {\n      var mapView = new ol.View({\n        center: ol.proj.fromLonLat([47.0833, -21.4333]),\n        zoom: 20\n      });\n      var map = new ol.Map({\n        target: 'map',\n        view: mapView\n      });\n      var osmTile = new ol.layer.Tile({\n        title: 'OpenStreetMap',\n        visible: true,\n        source: new ol.source.OSM()\n      });\n      map.addLayer(osmTile);\n      var AmericaStTile = new ol.layer.Tile({\n        title: \"Madagascar\",\n        source: new ol.source.TileWMS({\n          url: 'http://localhost:8080/geoserver/carte/wms',\n          params: {\n            'LAYERS': 'carte:Madagascar',\n            'TILED': true\n          },\n          serverType: 'geoserver',\n          visible: true\n        })\n      });\n      map.addLayer(AmericaStTile);\n      var layerSwitcher = new ol.control.LayerSwitcher({\n        activationMode: 'click',\n        startActive: false,\n        groupSelectStyle: 'children'\n      });\n      map.addControl(layerSwitcher);\n      var lengthElement = document.createElement('div');\n      lengthElement.className = 'lengthButtonDiv';\n      lengthElement.appendChild(lengthButton);\n      var lengthControl = new ol.control.Control({\n        element: lengthElement\n      });\n      var lengthFlag = false;\n      lengthButton.addEventListener(\"click\", () => {\n        addInteraction('LineString', lengthButton);\n      });\n      map.addControl(lengthControl);\n      var areaButton = document.createElement('button');\n      areaButton.innerHTML = '<img src=\"resources/images/1.svg\" alt=\"\" style=\"width:20px;height:20px;filter:brightness(0) invert(1);vertical-align:middle\"></img>';\n      areaButton.className = 'myButton';\n      areaButton.id = 'areaButton';\n      var areaElement = document.createElement('div');\n      areaElement.className = 'areaButtonDiv';\n      areaElement.appendChild(areaButton);\n      var areaControl = new ol.control.Control({\n        element: areaElement\n      });\n      var areaFlag = false;\n      areaButton.addEventListener(\"click\", () => {\n        addInteraction('Polygon', areaButton);\n      });\n      map.addControl(areaControl);\n      var measureTooltipElement;\n      var measureTooltip;\n      var draw; // global so we can remove it later\n      var sketch;\n      var currentButton = null;\n    },\n    formatLength(line) {\n      var length = ol.sphere.getLength(line);\n      var output;\n      if (length > 100) {\n        output = Math.round(length / 1000 * 100) / 100 + ' ' + 'km';\n      } else {\n        output = Math.round(length * 100) / 100 + ' ' + 'm';\n      }\n      return output;\n    },\n    formatArea(polygon) {\n      var area = ol.sphere.getArea(polygon);\n      var output;\n      if (area > 10000) {\n        output = Math.round(area / 1000000 * 100) / 100 + ' ' + 'km<sup>2</sup>';\n      } else {\n        output = Math.round(area * 100) / 100 + ' ' + 'm<sup>2</sup>';\n      }\n      return output;\n    }\n  }\n};","map":{"version":3,"names":["data","loading","error","position","mounted","getPosition","methods","navigator","geolocation","getCurrentPosition","latitude","coords","longitude","message","initMap","mapView","ol","View","center","proj","fromLonLat","zoom","map","Map","target","view","osmTile","layer","Tile","title","visible","source","OSM","addLayer","AmericaStTile","TileWMS","url","params","serverType","layerSwitcher","control","LayerSwitcher","activationMode","startActive","groupSelectStyle","addControl","lengthElement","document","createElement","className","appendChild","lengthButton","lengthControl","Control","element","lengthFlag","addEventListener","addInteraction","areaButton","innerHTML","id","areaElement","areaControl","areaFlag","measureTooltipElement","measureTooltip","draw","sketch","currentButton","formatLength","line","length","sphere","getLength","output","Math","round","formatArea","polygon","area","getArea"],"sources":["src/views/MappingView.vue"],"sourcesContent":["<template>\n    <div>\n        <h1>Position Géographique Actuelle</h1>\n        <p v-if=\"loading\">Récupération de la position en cours...</p>\n        <p v-if=\"error\">{{ error }}</p>\n        <p v-if=\"position\">\n            Latitude: {{ position.latitude }}<br>\n            Longitude: {{ position.longitude }}\n        </p>\n        <div id=\"map\"></div>\n    </div>\n</template>\n\n<script src=\"https://cdn.jsdelivr.net/npm/vue@2\"></script>\n<script src=\"../assets/resources/ol/ol.js\"></script>\n<script src=\"../assets/resources/ol-layerswitcher.js\"></script>\n\n<script>\nexport default{\n    data(){\n        return {\n            loading: true,\n            error: null,\n            position: null\n        }\n    },\n    mounted(){\n        this.getPosition()\n        \n    },\n    methods : {\n        getPosition(){\n            // Vérifier si le navigateur prend en charge la géolocalisation\n            if (navigator.geolocation) {\n                // Demander la position actuelle de l'utilisateur\n                navigator.geolocation.getCurrentPosition(\n                    (position) => {\n                        // Récupérer les coordonnées de la position\n                        this.position = {\n                            latitude: position.coords.latitude,\n                            longitude: position.coords.longitude\n                        };\n                        this.loading = false;\n                    },\n                    (error) => {\n                        // En cas d'erreur lors de la récupération de la position\n                        this.error = \"Erreur de géolocalisation : \" + error.message;\n                        this.loading = false;\n                    }\n                );\n            } else {\n                // Le navigateur ne prend pas en charge la géolocalisation\n                this.error = \"La géolocalisation n'est pas prise en charge par ce navigateur.\";\n                this.loading = false;\n            }\n        },\n        initMap(){\n            var mapView = new ol.View({\n                center: ol.proj.fromLonLat([ 47.0833,  -21.4333]),\n                zoom: 20\n            })\n            var map = new ol.Map({\n                target: 'map',\n                view: mapView\n            })\n            var osmTile = new ol.layer.Tile({\n                title: 'OpenStreetMap',\n                visible: true,\n                source: new ol.source.OSM()\n            })\n            map.addLayer(osmTile)\n\n            var AmericaStTile = new ol.layer.Tile({\n                title: \"Madagascar\",\n                source: new ol.source.TileWMS({\n                    url: 'http://localhost:8080/geoserver/carte/wms',\n                    params: { 'LAYERS': 'carte:Madagascar', 'TILED': true },\n                    serverType: 'geoserver',\n                    visible: true\n                })\n            })\n\n            map.addLayer(AmericaStTile)\n\n            var layerSwitcher = new ol.control.LayerSwitcher({\n                activationMode: 'click',\n                startActive: false,\n                groupSelectStyle: 'children'\n            })\n\n            map.addControl(layerSwitcher)\n\n            var lengthElement = document.createElement('div')\n            lengthElement.className = 'lengthButtonDiv'\n            lengthElement.appendChild(lengthButton)\n\n            var lengthControl = new ol.control.Control({\n                element: lengthElement\n            })\n\n            var lengthFlag = false;\n            lengthButton.addEventListener(\"click\", () => {\n                addInteraction('LineString', lengthButton);\n            })\n\n            map.addControl(lengthControl)\n\n            var areaButton = document.createElement('button');\n            areaButton.innerHTML = '<img src=\"resources/images/1.svg\" alt=\"\" style=\"width:20px;height:20px;filter:brightness(0) invert(1);vertical-align:middle\"></img>';\n            areaButton.className = 'myButton';\n            areaButton.id = 'areaButton';\n\n            var areaElement = document.createElement('div');\n            areaElement.className = 'areaButtonDiv';\n            areaElement.appendChild(areaButton);\n        \n            var areaControl = new ol.control.Control({\n                element: areaElement\n            })\n\n            var areaFlag = false;\n            areaButton.addEventListener(\"click\", () => {\n                addInteraction('Polygon', areaButton);\n            })\n\n            map.addControl(areaControl)\n\n            var measureTooltipElement;\n            var measureTooltip;\n\n            var draw; // global so we can remove it later\n            var sketch;\n            var currentButton = null;\n        },\n        formatLength(line){\n            var length = ol.sphere.getLength(line);\n            var output;\n            if (length > 100) {\n                output = (Math.round(length / 1000 * 100) / 100) +\n                    ' ' + 'km';\n            } else {\n                output = (Math.round(length * 100) / 100) +\n                    ' ' + 'm';\n            }\n            return output;\n        },\n        formatArea(polygon){\n            var area = ol.sphere.getArea(polygon);\n            var output;\n            if (area > 10000) {\n                output = (Math.round(area / 1000000 * 100) / 100) +\n                    ' ' + 'km<sup>2</sup>';\n            } else {\n                output = (Math.round(area * 100) / 100) +\n                    ' ' + 'm<sup>2</sup>';\n            }\n            return output;\n        }\n    }\n}\n</script>\n\n<style src=\"../assets/resources/ol/ol.css\"> </style>\n<style src=\"../assets/resources/ol-layerswitcher.css\"> </style>\n<style scoped>\n\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}