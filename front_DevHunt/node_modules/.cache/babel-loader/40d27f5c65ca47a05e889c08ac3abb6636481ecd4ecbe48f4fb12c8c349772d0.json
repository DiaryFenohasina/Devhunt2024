{"ast":null,"code":"import { backServer } from \"@/config/axiosConfig\";\nimport { io } from \"socket.io-client\";\nexport default {\n  data() {\n    return {\n      index: -1,\n      id: parseInt(localStorage.getItem(\"id\")),\n      username: localStorage.getItem(\"username\"),\n      user: {},\n      room: [],\n      users: [{\n        username: 'RAMANANTSOA Rotsiniaina'\n      }, {\n        username: 'RATSIMBAZAFY Tojoniaina Mbola Safidy'\n      }],\n      connectedUsers: [],\n      newMessage: null,\n      messages: [],\n      socket: null\n    };\n  },\n  created() {\n    // this.socketConnect()\n    // this.getUsers()\n  },\n  updated() {},\n  beforeDestroy() {\n    //   this.disconnect()\n  },\n  methods: {\n    isOnline(index) {\n      // console.log(index)\n      // console.log(this.connectedUsers)\n      const online = this.connectedUsers.find(user => user.UserId === index);\n      if (online) return true;\n      return false;\n    },\n    getUsers() {\n      backServer.get(`/getUsers/${this.id}`).then(res => {\n        this.users = [...res.data.user];\n      }).catch(err => {\n        console.log(err);\n      });\n    },\n    selectUser(ind) {\n      this.user = this.users.find(user => user.id === ind);\n      this.index = ind;\n      this.joinRoom(ind);\n      this.setRoom(ind);\n      this.getMessages();\n    },\n    socketConnect() {\n      // socket : io.connect(\"http://192.168.43.19:4001\")\n\n      this.socket = io(\"http://127.0.0.1:5000\");\n      this.socket.emit('status', {\n        username: this.username,\n        UserId: this.id\n      });\n      this.socket.on('connectedUser', user => {\n        this.connectedUsers = [...this.connectedUsers, ...user];\n      });\n    },\n    joinRoom(anotherID) {\n      this.socket.emit('join', `${this.id}--with--${anotherID}`);\n    },\n    getMessages() {\n      this.messages = [];\n      backServer.get(`/getMessage/${this.room}`).then(res => {\n        this.messages = [...res.data.msg];\n      });\n      this.socket.on('receiveMessage', message => {\n        this.messages = [...this.messages, message];\n      });\n    },\n    sendMessage() {\n      if (!this.newMessage) return;\n      let msg = {\n        UserId: this.id,\n        msg: this.newMessage,\n        room: this.room\n      };\n      backServer.post('/sendMessage', msg).then(res => {\n        if (res.data.message == 'message stored') {\n          this.socket.emit('sendMessage', res.data.msg);\n          this.messages = [...this.messages, res.data.msg];\n        }\n      }).catch(err => {\n        console.log(err);\n      });\n      this.newMessage = '';\n    },\n    setRoom(id) {\n      let data = new Array(this.id, id);\n      let unique = [...new Set(data)].sort((a, b) => a < b ? -1 : 1);\n      this.room = `${unique[0]}--with--${unique[1]}`;\n    },\n    disconnect() {\n      this.socket.emit('leave', this.id);\n      this.socket.disconnect();\n    }\n  }\n};","map":{"version":3,"names":["backServer","io","data","index","id","parseInt","localStorage","getItem","username","user","room","users","connectedUsers","newMessage","messages","socket","created","updated","beforeDestroy","methods","isOnline","online","find","UserId","getUsers","get","then","res","catch","err","console","log","selectUser","ind","joinRoom","setRoom","getMessages","socketConnect","emit","on","anotherID","msg","message","sendMessage","post","Array","unique","Set","sort","a","b","disconnect"],"sources":["src/views/Discussion.vue"],"sourcesContent":["<template>\n  <section class=\"pt-5\">\n    <div class=\"container shadow section-sm rounded min-Height\">\n      <div class=\"row\">\n        <div class=\"sideChat col-lg-1\">\n            <ul class=\"\">\n                <li class=\"d-flex sidelist c-type\" @click=\"selectPanel('ChatBot')\">\n                    <i class=\"card-icon-Tools mb-4 ti-heart\"></i>\n                </li>\n                <li class=\"d-flex sidelist c-type\" @click=\"selectPanel('Person')\">\n                    <i class=\"card-icon-Tools mb-4 ti-heart\"></i>\n                </li>\n                <li class=\"d-flex sidelist c-type\" @click=\"selectUser(user.id)\">\n                    <i class=\"card-icon-Tools mb-4 ti-heart\"></i>\n                </li>\n                <li class=\"d-flex sidelist c-type\" @click=\"selectUser(user.id)\">\n                    <i class=\"card-icon-Tools mb-4 ti-heart\"></i>\n                </li>\n            </ul>\n        </div>\n        <div class=\"col-lg-3\">\n          <ul class=\"sidenav\" v-for=\"user in users\" :key=\"user.id\">\n            <li class=\"d-flex sidelist c-type\" @click=\"selectUser(user.id)\">\n              <span :class=\"index == user.id && 'isActive'\">{{\n                user.username \n              }}</span><div v-if=\"isOnline(user.id)\" class=\"online\"></div>\n            </li>\n          </ul>\n        </div>\n        <div class=\"col-lg-8\">\n          <div class=\"mx-5 message\">\n\n               <!-- USER TO CHAT -->\n              \n                <div v-if=\"user.username\">\n                  <div  class=\"rounded-5 shadow p-2 mb-4 \" style=\"height:50px\">\n                    <h4 class=\"d-flex \">{{user.username}} <span class=\"mx-4 p-0\" >connected</span></h4>  \n                  </div>\n\n                  <!-- CHAT MESSAGE -->\n                  <div class=\" rounded-5 mb-3 bg-light \">\n                    <ul  class=\"px-3 card-message  list-group  rounded-5 \">\n                      \n                      <li v-for=\"(message, index) in messages\" :key=\"index\" :class=\"{'mt-4' : index == 0}\" >\n                        <p class=\" message-font shadow\" :class=\"[ message.UserId == id ? 'float-end chat-l' : 'chat-r'  ]\">\n                          {{ message.msg }}\n                          <!-- <small>:{{ message.id}}</small>  -->\n                          \n                        </p>\n                      </li>\n                    </ul>\n                    <div class=\"search-wrapper  d-sm-flex\">\n                      <input id=\"search-by\" name=\"s\" type=\"email\" class=\"form-control form-control-sm\" placeholder=\"Your message here\" style=\"width:100%\" v-model=\"newMessage\" @keypress.enter=\"sendMessage\">\n                      <input type=\"submit\" class=\"btn btn-primary btn-sm\" value=\"Send\" @click=\"sendMessage\">\n                    </div>\n                  </div>\n                </div>\n\n\n              <div v-else class=\"text-center\">\n                <p  class=\"message\" >Choose an user to chat</p>\n              </div>\n             \n            </div>\n        </div>\n      </div>\n    </div>\n  </section>\n</template>\n<script>\nimport { backServer } from \"@/config/axiosConfig\";\nimport { io }  from \"socket.io-client\"\n\nexport default {\n  data() {\n    return {\n      index: -1,\n      id: parseInt(localStorage.getItem(\"id\")),\n      username: localStorage.getItem(\"username\"),\n      user:{},\n      room : [],\n      users: [\n        {\n            username: 'RAMANANTSOA Rotsiniaina'\n        },\n        {\n            username: 'RATSIMBAZAFY Tojoniaina Mbola Safidy'\n        }\n\n        ],\n      connectedUsers: [],\n      newMessage: null,\n      messages: [],\n      socket: null\n      \n    };\n  },\n  created() {\n    // this.socketConnect()\n    // this.getUsers()\n  },\n  updated(){\n  },  \n  beforeDestroy()\n  {\n    //   this.disconnect()\n  },\n  methods: {\n    isOnline(index)\n    {\n      // console.log(index)\n      // console.log(this.connectedUsers)\n      const online = this.connectedUsers.find((user) => user.UserId === index)\n      if(online) return true\n\n      return false\n    },\n    getUsers() {\n      backServer\n        .get(`/getUsers/${this.id}`)\n        .then( (res) => {\n           this.users =  [...res.data.user];\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    },\n    selectUser(ind) {\n      this.user = this.users.find((user) => user.id === ind )\n      this.index = ind;\n      this.joinRoom(ind)\n      this.setRoom(ind)\n      this.getMessages()\n      \n    },\n    socketConnect(){\n      \n      // socket : io.connect(\"http://192.168.43.19:4001\")\n\n      this.socket = io(\"http://127.0.0.1:5000\")\n      this.socket.emit('status',{username: this.username, UserId:this.id})\n      this.socket.on('connectedUser', (user) => {\n        this.connectedUsers = [...this.connectedUsers, ...user]\n      })\n    },\n    joinRoom(anotherID){\n      this.socket.emit('join', `${this.id}--with--${anotherID}`)\n    },\n    getMessages(){\n      this.messages = []\n      \n      backServer.get(`/getMessage/${this.room}`)\n      .then(res => {\n        this.messages = [...res.data.msg];\n\n      })\n\n      this.socket.on('receiveMessage',(message) => {\n        this.messages = [...this.messages, message]\n      })\n    },\n    sendMessage()\n    {\n      if(!this.newMessage) return\n\n      let msg = {UserId : this.id, msg: this.newMessage, room: this.room}\n        backServer.post('/sendMessage',msg)\n        .then(res => {\n          if(res.data.message == 'message stored'){\n            this.socket.emit('sendMessage', res.data.msg)\n            this.messages = [...this.messages, res.data.msg]\n          }\n        })\n        .catch(err => {\n          console.log(err)\n        })\n      this.newMessage = ''\n\n    },\n    setRoom(id)\n    {\n      let data = new Array(this.id,id)\n      let unique = [...new Set(data)].sort((a, b) => (a < b ? -1 : 1));\n\n      this.room = `${unique[0]}--with--${unique[1]}`\n    },\n    disconnect()\n    {\n      this.socket.emit('leave', this.id)\n      this.socket.disconnect()\n    },\n  },\n  \n};\n</script>\n<style scoped>\n    .rounded-5{\n        border-radius: 5px !important;\n    }\n    .message{\n        position: relative;\n        top: 50%;\n        left: 50%;\n        transform: translate(-50%, -50%);\n        font-size: 16px;\n    }\n    .message-font{\n        font-size: 13px;\n    }\n    .min-Height{\n\n        min-height: 800px;\n        max-height: 800px;\n    }\n    .message-panel{\n        min-height: 700px;\n        max-height: 700px;\n    }\n    .card-message{\n        min-height: 560px;\n        max-height: 560px;\n        overflow-y: scroll;\n        \n    }\n    .chat-r{\n        \n        border-top-right-radius: 15px;\n        border-bottom-left-radius: 15px;\n        border-bottom-right-radius: 15px;\n        background: #cacaca;\n        padding-top: 5px;\n        padding-bottom: 5px;\n        padding-left: 10px;\n        padding-right: 10px;\n        max-width: 300px;\n        \n    }\n    .chat-l{\n        \n        border-top-left-radius: 15px;\n        border-bottom-left-radius: 15px;\n        border-bottom-right-radius: 15px;\n        background: #ffffff;\n        padding-top: 5px;\n        padding-bottom: 5px;\n        padding-left: 10px;\n        padding-right: 10px;\n        max-width: 300px;\n        \n    }\n    .online{\n        position: relative;\n        left: 15px;\n        top: 20px;\n        width: 8px;\n        height: 8px;\n        border-radius:50px;\n        background-color: rgb(3, 173, 26);\n    }\n    .sideChat{\n        border-right:1px solid #E2E2E2;\n    }\n    .active{\n        color: var(--baseColor);\n    }\n    li:hover{\n        color: var(--baseColor);\n    }\n    .card-icon-Tools-active {\n        background: var(--baseColor);\n        color: #fff;\n        height: 55px;\n        width: 60px;\n        line-height: 55px;\n        text-align: center;\n        font-size: 27px;\n        display: block;\n        border-radius: 12px !important;\n    }\n    .card-icon-Tools:hover {\n        background: var(--baseColor);\n        color: #fff;\n        height: 55px;\n        width: 60px;\n        line-height: 55px;\n        text-align: center;\n        font-size: 27px;\n        display: block;\n        border-radius: 12px !important;\n    }\n    .card-icon-Tools {\n        /* backgrounrgb(148, 148, 148)2E2; */\n        color: #5c5c5c;\n        height: 55px;\n        width: 60px;\n        line-height: 55px;\n        text-align: center;\n        font-size: 27px;\n        display: block;\n        border-radius: 12px !important;\n    }\n</style>\n</template>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}