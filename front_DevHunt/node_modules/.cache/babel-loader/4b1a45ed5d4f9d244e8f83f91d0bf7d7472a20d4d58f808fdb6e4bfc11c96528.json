{"ast":null,"code":"import { backServer } from \"@/config/axiosConfig\";\nimport { io } from \"socket.io-client\";\nexport default {\n  data() {\n    return {\n      index: -1,\n      id: parseInt(localStorage.getItem(\"id\")),\n      username: localStorage.getItem(\"username\"),\n      user: {},\n      room: [],\n      users: [],\n      connectedUsers: [],\n      newMessage: null,\n      messages: [],\n      socket: null\n    };\n  },\n  watch: {\n    messages(newVal) {\n      this.messages = newVal;\n    }\n  },\n  created() {\n    this.socketConnect();\n    this.getUsers();\n  },\n  beforeDestroy() {\n    this.disconnect();\n  },\n  methods: {\n    getUsers() {\n      backServer.get(`/getUsers/${this.id}`).then(res => {\n        this.users = [...res.data.user];\n      }).catch(err => {\n        console.log(err);\n      });\n    },\n    selectUser(ind) {\n      this.user = this.users.find(user => user.id === ind);\n      this.index = ind;\n      this.joinRoom(ind);\n      this.setRoom(ind);\n      this.getMessages();\n    },\n    socketConnect() {\n      // socket : io.connect(\"http://192.168.43.19:4001\")\n      this.socket = io(\"http://127.0.0.1:3000\");\n      this.socket.emit('status', {\n        username: this.username,\n        id: this.id\n      });\n      this.socket.on('connectedUser', user => {\n        this.connectedUsers = [...this.connectedUsers, ...user];\n      });\n    },\n    joinRoom(anotherID) {\n      this.socket.emit('join', `${this.id}--with--${anotherID}`);\n    },\n    getMessages() {\n      this.socket.on('receiveMessage', message => {\n        this.messages = [...this.messages, message];\n      });\n    },\n    sendMessage() {\n      if (!this.newMessage) return;\n      let msg = {\n        msg: this.newMessage,\n        id: this.id\n      };\n      this.messages = [...this.messages, msg];\n      this.socket.emit('sendMessage', msg);\n      this.newMessage = '';\n    },\n    setRoom(id) {\n      let data = new Array(this.id, id);\n      let unique = [...new Set(data)].sort((a, b) => a < b ? -1 : 1);\n      this.room = `${unique[0]}--with--${unique[1]}`;\n      console;\n    },\n    disconnect() {\n      this.socket.emit('leave', this.id);\n      this.socket.disconnect();\n    }\n  }\n};","map":{"version":3,"names":["backServer","io","data","index","id","parseInt","localStorage","getItem","username","user","room","users","connectedUsers","newMessage","messages","socket","watch","newVal","created","socketConnect","getUsers","beforeDestroy","disconnect","methods","get","then","res","catch","err","console","log","selectUser","ind","find","joinRoom","setRoom","getMessages","emit","on","anotherID","message","sendMessage","msg","Array","unique","Set","sort","a","b"],"sources":["src/views/Chat.vue"],"sourcesContent":["<template>\n  <section class=\"pt-5\">\n    <div class=\"container shadow-lg section-sm rounded\">\n      <div class=\"row\">\n        <div class=\"col-lg-3\">\n          <ul class=\"sidenav\" v-for=\"user in users\" :key=\"user.id\">\n            <li class=\"sidelist c-type\" @click=\"selectUser(user.id)\">\n              <span :class=\"index == user.id && 'isActive'\">{{\n                user.username\n              }}</span>\n            </li>\n          </ul>\n        </div>\n        <div class=\"col-lg-8 \">\n          <div class=\"mx-5 message\">\n              \n              <div v-if=\"user.username\" class=\"d-flex flex-column\">\n                <div class=\"d-flex felx-row \">\n                  <h4 class=\"d-flex \">{{user.username}} <span class=\"mx-4 p-0\" >connections</span></h4>\n                  \n                </div>\n                <div class=\" rounded-5 mb-3 shadow \">\n                  <ul class=\"list-group rounded-5 list-group-flush list-unstyled text-start\">\n                    <li class=\"list-group-item list-unstyled\" v-for=\"(message, index) in messages\" :key=\"index\" >\n                      <span class=\"message-font\" :class=\"{ 'float-end': message.id === id }\">\n                        {{ message.msg }}\n                        <small>:{{ message.id}}</small> {{message.room}}\n                      </span>\n                    </li>\n                  </ul>\n                </div>\n                <div class=\"search-wrapper d-sm-flex\">\n                    <input id=\"search-by\" name=\"s\" type=\"email\" class=\"form-control form-control-sm\" placeholder=\"Your message here\" style=\"width:100%\" v-model=\"newMessage\" @keypress.enter=\"sendMessage\">\n                    <input type=\"submit\" class=\"btn btn-primary btn-sm\" value=\"Send\" @click=\"sendMessage\">\n                </div>\n              </div>\n\n              <div v-else class=\"text-center\">\n                <p  class=\"message\" >Choose an user to send message</p>\n              </div>\n             \n            </div>\n        </div>\n      </div>\n    </div>\n  </section>\n</template>\n<script>\nimport { backServer } from \"@/config/axiosConfig\";\nimport { io }  from \"socket.io-client\"\n\nexport default {\n  data() {\n    return {\n      index: -1,\n      id: parseInt(localStorage.getItem(\"id\")),\n      username: localStorage.getItem(\"username\"),\n      user:{},\n      room : [],\n      users: [],\n      connectedUsers: [],\n      newMessage: null,\n      messages: [],\n      socket: null\n      \n    };\n  },\n  watch:{\n    messages(newVal){\n      this.messages = newVal;\n    }\n  },\n  created() {\n    this.socketConnect()\n    this.getUsers()\n  },\n  beforeDestroy()\n  {\n      this.disconnect()\n  },\n  methods: {\n    getUsers() {\n      backServer\n        .get(`/getUsers/${this.id}`)\n        .then( (res) => {\n          this.users = [...res.data.user];\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    },\n    selectUser(ind) {\n      this.user = this.users.find((user) => user.id === ind )\n      this.index = ind;\n      this.joinRoom(ind)\n      this.setRoom(ind)\n      this.getMessages()\n    },\n    socketConnect(){\n      // socket : io.connect(\"http://192.168.43.19:4001\")\n      this.socket = io(\"http://127.0.0.1:3000\")\n      this.socket.emit('status',{username: this.username, id:this.id})\n      this.socket.on('connectedUser', (user) => {\n        this.connectedUsers = [...this.connectedUsers, ...user]\n      })\n    },\n    joinRoom(anotherID){\n      this.socket.emit('join', `${this.id}--with--${anotherID}`)\n    },\n    getMessages(){\n       this.socket.on('receiveMessage',(message) => {\n          this.messages = [...this.messages, message]\n        })\n    },\n    sendMessage()\n    {\n      if(!this.newMessage) return\n      let msg = {msg: this.newMessage, id: this.id}\n      this.messages = [...this.messages, msg]\n      this.socket.emit('sendMessage', msg)\n      this.newMessage = ''\n    },\n    setRoom(id)\n    {\n      let data = new Array(this.id,id)\n      let unique = [...new Set(data)].sort((a, b) => (a < b ? -1 : 1));\n\n      this.room = `${unique[0]}--with--${unique[1]}`\n      console\n    },\n    disconnect()\n    {\n      this.socket.emit('leave', this.id)\n      this.socket.disconnect()\n    }\n  },\n  \n};\n</script>\n<style scoped>\n  .rounded-5{\n    border-radius: 5px !important;\n  }\n  .message{\n    position: relative;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    font-size: 16px;\n  }\n  .message-font{\n    font-size: 13px;\n  }\n</style>"],"mappings":"AAgDA,SAAAA,UAAA;AACA,SAAAC,EAAA;AAEA;EACAC,KAAA;IACA;MACAC,KAAA;MACAC,EAAA,EAAAC,QAAA,CAAAC,YAAA,CAAAC,OAAA;MACAC,QAAA,EAAAF,YAAA,CAAAC,OAAA;MACAE,IAAA;MACAC,IAAA;MACAC,KAAA;MACAC,cAAA;MACAC,UAAA;MACAC,QAAA;MACAC,MAAA;IAEA;EACA;EACAC,KAAA;IACAF,SAAAG,MAAA;MACA,KAAAH,QAAA,GAAAG,MAAA;IACA;EACA;EACAC,QAAA;IACA,KAAAC,aAAA;IACA,KAAAC,QAAA;EACA;EACAC,cAAA,EACA;IACA,KAAAC,UAAA;EACA;EACAC,OAAA;IACAH,SAAA;MACApB,UAAA,CACAwB,GAAA,mBAAApB,EAAA,IACAqB,IAAA,CAAAC,GAAA;QACA,KAAAf,KAAA,OAAAe,GAAA,CAAAxB,IAAA,CAAAO,IAAA;MACA,GACAkB,KAAA,CAAAC,GAAA;QACAC,OAAA,CAAAC,GAAA,CAAAF,GAAA;MACA;IACA;IACAG,WAAAC,GAAA;MACA,KAAAvB,IAAA,QAAAE,KAAA,CAAAsB,IAAA,CAAAxB,IAAA,IAAAA,IAAA,CAAAL,EAAA,KAAA4B,GAAA;MACA,KAAA7B,KAAA,GAAA6B,GAAA;MACA,KAAAE,QAAA,CAAAF,GAAA;MACA,KAAAG,OAAA,CAAAH,GAAA;MACA,KAAAI,WAAA;IACA;IACAjB,cAAA;MACA;MACA,KAAAJ,MAAA,GAAAd,EAAA;MACA,KAAAc,MAAA,CAAAsB,IAAA;QAAA7B,QAAA,OAAAA,QAAA;QAAAJ,EAAA,OAAAA;MAAA;MACA,KAAAW,MAAA,CAAAuB,EAAA,kBAAA7B,IAAA;QACA,KAAAG,cAAA,YAAAA,cAAA,KAAAH,IAAA;MACA;IACA;IACAyB,SAAAK,SAAA;MACA,KAAAxB,MAAA,CAAAsB,IAAA,iBAAAjC,EAAA,WAAAmC,SAAA;IACA;IACAH,YAAA;MACA,KAAArB,MAAA,CAAAuB,EAAA,mBAAAE,OAAA;QACA,KAAA1B,QAAA,YAAAA,QAAA,EAAA0B,OAAA;MACA;IACA;IACAC,YAAA,EACA;MACA,UAAA5B,UAAA;MACA,IAAA6B,GAAA;QAAAA,GAAA,OAAA7B,UAAA;QAAAT,EAAA,OAAAA;MAAA;MACA,KAAAU,QAAA,YAAAA,QAAA,EAAA4B,GAAA;MACA,KAAA3B,MAAA,CAAAsB,IAAA,gBAAAK,GAAA;MACA,KAAA7B,UAAA;IACA;IACAsB,QAAA/B,EAAA,EACA;MACA,IAAAF,IAAA,OAAAyC,KAAA,MAAAvC,EAAA,EAAAA,EAAA;MACA,IAAAwC,MAAA,WAAAC,GAAA,CAAA3C,IAAA,GAAA4C,IAAA,EAAAC,CAAA,EAAAC,CAAA,KAAAD,CAAA,GAAAC,CAAA;MAEA,KAAAtC,IAAA,MAAAkC,MAAA,cAAAA,MAAA;MACAf,OAAA;IACA;IACAP,WAAA,EACA;MACA,KAAAP,MAAA,CAAAsB,IAAA,eAAAjC,EAAA;MACA,KAAAW,MAAA,CAAAO,UAAA;IACA;EACA;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}