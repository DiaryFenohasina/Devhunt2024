{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { io } from 'socket.io-client';\nexport default {\n  data() {\n    return {\n      newMessage: \"\",\n      typing: false,\n      ready: true,\n      info: [],\n      connections: 0,\n      messages: [],\n      username: null\n    };\n  },\n  mounted() {\n    const socket = io();\n\n    // Socket event listeners using Vue methods\n    socket.on(\"chat-message\", this.handleChatMessage);\n    socket.on(\"typing\", this.handleTyping);\n    socket.on(\"stopTyping\", this.handleStopTyping);\n    socket.on(\"joined\", this.handleJoined);\n    socket.on(\"leave\", this.handleLeave);\n    socket.on(\"connections\", this.handleConnections);\n    window.onbeforeunload = () => {\n      socket.emit(\"leave\", this.username);\n    };\n  },\n  methods: {\n    handleChatMessage(data) {\n      // Implement logic to handle chat message\n      this.messages.push({\n        message: data.message,\n        type: 1,\n        user: data.user\n      });\n    },\n    handleTyping(data) {\n      // Implement logic to indicate user typing\n      this.typing = data;\n    },\n    handleStopTyping() {\n      // Implement logic to remove typing indicator\n      this.typing = false;\n    },\n    handleJoined(data) {\n      // Implement logic to handle user joining\n      this.info.push({\n        username: data.name,\n        type: \"joined\"\n      });\n      this.messages.push(...data.messages);\n      setTimeout(() => {\n        this.info.length = 0;\n      }, 5000);\n    },\n    handleLeave(data) {\n      // Implement logic to handle user leaving\n      this.info.push({\n        username: data,\n        type: \"left\"\n      });\n      setTimeout(() => {\n        this.info.length = 0;\n      }, 5000);\n    },\n    handleConnections(data) {\n      // Implement logic to update connection count\n      this.connections = data;\n    },\n    send() {\n      this.messages.push({\n        message: this.newMessage,\n        type: 0,\n        user: \"Me\"\n      });\n      socket.emit(\"chat-message\", {\n        message: this.newMessage,\n        user: this.username\n      });\n      this.newMessage = \"\";\n    },\n    addUser() {\n      this.ready = true;\n      socket.emit(\"joined\", this.username);\n    }\n  }\n};","map":{"version":3,"names":["io","data","newMessage","typing","ready","info","connections","messages","username","mounted","socket","on","handleChatMessage","handleTyping","handleStopTyping","handleJoined","handleLeave","handleConnections","window","onbeforeunload","emit","methods","push","message","type","user","name","setTimeout","length","send","addUser"],"sources":["src/views/Chat.vue"],"sourcesContent":["<template>\n    <div class=\"container\">\n        <div class=\"col-lg-6 offset-lg-3\">\n          <div v-if=\"ready\">\n            <p v-for=\"(user, i) in info\" :key=\"i\">\n              {{ user.username }} {{ user.type }}\n            </p>\n          </div>\n    \n        \n          <h2 v-else>{{ username }}</h2>\n          <div class=\"card bg-info\" v-if=\"ready\">\n            <div class=\"card-header text-white\">\n              <h4>\n                My Chat App\n                <span class=\"float-right\">{{ connections }} connections</span>\n              </h4>\n            </div>\n            <ul class=\"list-group list-group-flush text-right\">\n              <small v-if=\"typing\" class=\"text-white\">{{ typing }} is typing</small>\n              <li class=\"list-group-item\" v-for=\"(message, i) in messages\" :key=\"i\">\n                <span :class=\"{ 'float-left': message.type === 1 }\">\n                  {{ message.message }}\n                  <small>:{{ message.user }}</small>\n                </span>\n              </li>\n            </ul>\n    \n            <div class=\"card-body\">\n              <form @submit.prevent=\"send\">\n                <div class=\"form-group\">\n                  <input\n                    type=\"text\"\n                    class=\"form-control\"\n                    v-model=\"newMessage\"\n                    placeholder=\"Enter message here\"\n                  />\n                </div>\n              </form>\n            </div>\n          </div>\n        </div>\n      </div>\n</template>\n<script>\n    import {io} from 'socket.io-client'\n    export default {\n        data(){\n            return {\n                newMessage: \"\",\n                typing: false,\n                ready: true,\n                info: [],\n                connections: 0,\n                messages: [],\n                username: null,\n            }\n        },\n        mounted() {\n            const socket = io();\n\n    // Socket event listeners using Vue methods\n            socket.on(\"chat-message\", this.handleChatMessage);\n            socket.on(\"typing\", this.handleTyping);\n            socket.on(\"stopTyping\", this.handleStopTyping);\n            socket.on(\"joined\", this.handleJoined);\n            socket.on(\"leave\", this.handleLeave);\n            socket.on(\"connections\", this.handleConnections);\n\n            window.onbeforeunload = () => {\n                socket.emit(\"leave\", this.username);\n            };\n        },\n        methods: {\n    handleChatMessage(data) {\n      // Implement logic to handle chat message\n      this.messages.push({\n        message: data.message,\n        type: 1,\n        user: data.user,\n      });\n    },\n    handleTyping(data) {\n      // Implement logic to indicate user typing\n      this.typing = data;\n    },\n    handleStopTyping() {\n      // Implement logic to remove typing indicator\n      this.typing = false;\n    },\n    handleJoined(data) {\n      // Implement logic to handle user joining\n      this.info.push({\n        username: data.name,\n        type: \"joined\",\n      });\n      this.messages.push(...data.messages);\n      setTimeout(() => {\n        this.info.length = 0;\n      }, 5000);\n    },\n    handleLeave(data) {\n      // Implement logic to handle user leaving\n      this.info.push({\n        username: data,\n        type: \"left\",\n      });\n      setTimeout(() => {\n        this.info.length = 0;\n      }, 5000);\n    },\n    handleConnections(data) {\n      // Implement logic to update connection count\n      this.connections = data;\n    },\n    send() {\n      this.messages.push({\n        message: this.newMessage,\n        type: 0,\n        user: \"Me\",\n      });\n\n      socket.emit(\"chat-message\", {\n        message: this.newMessage,\n        user: this.username,\n      });\n      this.newMessage = \"\";\n    },\n    addUser() {\n      this.ready = true;\n      socket.emit(\"joined\", this.username);\n    },\n  },\n    }\n\n</script>\n"],"mappings":";AA6CA,SAAAA,EAAA;AACA;EACAC,KAAA;IACA;MACAC,UAAA;MACAC,MAAA;MACAC,KAAA;MACAC,IAAA;MACAC,WAAA;MACAC,QAAA;MACAC,QAAA;IACA;EACA;EACAC,QAAA;IACA,MAAAC,MAAA,GAAAV,EAAA;;IAEA;IACAU,MAAA,CAAAC,EAAA,sBAAAC,iBAAA;IACAF,MAAA,CAAAC,EAAA,gBAAAE,YAAA;IACAH,MAAA,CAAAC,EAAA,oBAAAG,gBAAA;IACAJ,MAAA,CAAAC,EAAA,gBAAAI,YAAA;IACAL,MAAA,CAAAC,EAAA,eAAAK,WAAA;IACAN,MAAA,CAAAC,EAAA,qBAAAM,iBAAA;IAEAC,MAAA,CAAAC,cAAA;MACAT,MAAA,CAAAU,IAAA,eAAAZ,QAAA;IACA;EACA;EACAa,OAAA;IACAT,kBAAAX,IAAA;MACA;MACA,KAAAM,QAAA,CAAAe,IAAA;QACAC,OAAA,EAAAtB,IAAA,CAAAsB,OAAA;QACAC,IAAA;QACAC,IAAA,EAAAxB,IAAA,CAAAwB;MACA;IACA;IACAZ,aAAAZ,IAAA;MACA;MACA,KAAAE,MAAA,GAAAF,IAAA;IACA;IACAa,iBAAA;MACA;MACA,KAAAX,MAAA;IACA;IACAY,aAAAd,IAAA;MACA;MACA,KAAAI,IAAA,CAAAiB,IAAA;QACAd,QAAA,EAAAP,IAAA,CAAAyB,IAAA;QACAF,IAAA;MACA;MACA,KAAAjB,QAAA,CAAAe,IAAA,IAAArB,IAAA,CAAAM,QAAA;MACAoB,UAAA;QACA,KAAAtB,IAAA,CAAAuB,MAAA;MACA;IACA;IACAZ,YAAAf,IAAA;MACA;MACA,KAAAI,IAAA,CAAAiB,IAAA;QACAd,QAAA,EAAAP,IAAA;QACAuB,IAAA;MACA;MACAG,UAAA;QACA,KAAAtB,IAAA,CAAAuB,MAAA;MACA;IACA;IACAX,kBAAAhB,IAAA;MACA;MACA,KAAAK,WAAA,GAAAL,IAAA;IACA;IACA4B,KAAA;MACA,KAAAtB,QAAA,CAAAe,IAAA;QACAC,OAAA,OAAArB,UAAA;QACAsB,IAAA;QACAC,IAAA;MACA;MAEAf,MAAA,CAAAU,IAAA;QACAG,OAAA,OAAArB,UAAA;QACAuB,IAAA,OAAAjB;MACA;MACA,KAAAN,UAAA;IACA;IACA4B,QAAA;MACA,KAAA1B,KAAA;MACAM,MAAA,CAAAU,IAAA,gBAAAZ,QAAA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}