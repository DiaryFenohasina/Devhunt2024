{"ast":null,"code":"import { backServer } from \"@/config/axiosConfig\";\nimport { io } from \"socket.io-client\";\nexport default {\n  data() {\n    return {\n      index: -1,\n      id: localStorage.getItem(\"id\"),\n      username: localStorage.getItem(\"username\"),\n      user: {},\n      users: [],\n      newMessage: null,\n      messages: [{\n        msg: \"bonjour\",\n        id: 5\n      }, {\n        msg: \"De akory\",\n        id: 5\n      }, {\n        msg: \"cava\",\n        id: 1\n      }],\n      socket: null\n    };\n  },\n  watch: {\n    messages(newVal) {\n      console.log(newVal);\n    }\n  },\n  created() {\n    this.socket = io(\"http://127.0.0.1:3000\");\n    this.getUsers();\n    this.getMessages();\n  },\n  beforeDestroy() {\n    this.disconnect();\n  },\n  methods: {\n    getUsers() {\n      backServer.get(`/getUsers/${this.id}`).then(res => {\n        this.users = [...res.data.user];\n      }).catch(err => {\n        console.log(err);\n      });\n    },\n    selectUser(ind) {\n      this.user = this.users.find(user => user.id === ind);\n      this.index = ind;\n      this.joinRoom(ind);\n    },\n    joinRoom(anotherID) {\n      this.socket.emit('join', `${this.id}--with--${anotherID}`);\n    },\n    getMessages() {\n      this.socket.on('receiveMessage', message => {\n        this.messages = [...this.messages, message];\n      });\n    },\n    sendMessage() {\n      if (!this.newMessage) return;\n      this.socket.emit('sendMessage', {\n        msg: this.newMessage,\n        id: this.id\n      });\n      this.newMessage = '';\n    },\n    disconnect() {\n      if (this.socket) this.socket.disconnect();\n    }\n  }\n};","map":{"version":3,"names":["backServer","io","data","index","id","localStorage","getItem","username","user","users","newMessage","messages","msg","socket","watch","newVal","console","log","created","getUsers","getMessages","beforeDestroy","disconnect","methods","get","then","res","catch","err","selectUser","ind","find","joinRoom","anotherID","emit","on","message","sendMessage"],"sources":["src/views/Chat.vue"],"sourcesContent":["<template>\n  <section class=\"pt-5\">\n    <div class=\"container shadow-lg section-sm rounded\">\n      <div class=\"row\">\n        <div class=\"col-lg-3\">\n          <ul class=\"sidenav\" v-for=\"user in users\" :key=\"user.id\">\n            <li class=\"sidelist c-type\" @click=\"selectUser(user.id)\">\n              <span :class=\"index == user.id && 'isActive'\">{{\n                user.username\n              }}</span>\n            </li>\n          </ul>\n        </div>\n        <div class=\"col-lg-8 \">\n          <div class=\"mx-5 message\">\n              \n              <div v-if=\"user.username\" class=\"d-flex flex-column\">\n                <div>\n                  <h4>{{user.username}} <span class=\"float-end\">connections</span></h4>\n                </div>\n                <div class=\" rounded-5 mb-3 shadow \">\n                  <ul class=\"list-group rounded-5 list-group-flush list-unstyled text-start\">\n                    <li class=\"list-group-item list-unstyled\" v-for=\"(message, index) in messages\" :key=\"index\" >\n                      <span class=\"message-font\" :class=\"{ 'float-end': message.id == id }\">\n                        {{ message.msg }}\n                        <small>:{{ message.user }}</small>\n                      </span>\n                    </li>\n                  </ul>\n                </div>\n                <div class=\"search-wrapper d-sm-flex\">\n                    <input id=\"search-by\" name=\"s\" type=\"email\" class=\"form-control form-control-sm\" placeholder=\"Your message here\" style=\"width:100%\" v-model=\"newMessage\" @keypress.enter=\"sendMessage\">\n                    <input type=\"submit\" class=\"btn btn-primary btn-sm\" value=\"Send\" @click=\"sendMessage\">\n                </div>\n              </div>\n\n              <div v-else class=\"text-center\">\n                <p  class=\"message\" >Choose an user to send message</p>\n              </div>\n             \n            </div>\n        </div>\n      </div>\n    </div>\n  </section>\n</template>\n<script>\nimport { backServer } from \"@/config/axiosConfig\";\nimport { io }  from \"socket.io-client\"\n\nexport default {\n  data() {\n    return {\n      index: -1,\n      id: localStorage.getItem(\"id\"),\n      username: localStorage.getItem(\"username\"),\n      user:{},\n      users: [],\n      newMessage: null,\n      messages: [\n        { msg: \"bonjour\", id: 5 },\n        { msg: \"De akory\", id: 5 },\n        { msg: \"cava\", id: 1 },\n      ],\n      socket: null\n      \n    };\n  },\n  watch:{\n    messages(newVal){\n      console.log(newVal)\n    }\n  },\n  created() {\n    this.socket = io(\"http://127.0.0.1:3000\")\n    this.getUsers()\n    this.getMessages()\n  },\n  beforeDestroy()\n  {\n      this.disconnect()\n  },\n  methods: {\n    getUsers() {\n      backServer\n        .get(`/getUsers/${this.id}`)\n        .then((res) => {\n          this.users = [...res.data.user];\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    },\n    selectUser(ind) {\n      this.user = this.users.find((user) => user.id === ind )\n      this.index = ind;\n      this.joinRoom(ind)\n    },\n    joinRoom(anotherID){\n      this.socket.emit('join', `${this.id}--with--${anotherID}`)\n    },\n    getMessages(){\n       this.socket.on('receiveMessage',(message) => {\n          this.messages = [...this.messages, message]\n        })\n    },\n    sendMessage()\n    {\n      if(!this.newMessage) return\n      this.socket.emit('sendMessage', {msg: this.newMessage, id: this.id})\n      this.newMessage = ''\n    },\n    disconnect()\n    {\n      if(this.socket) this.socket.disconnect()\n    }\n  },\n  \n};\n</script>\n<style scoped>\n  .rounded-5{\n    border-radius: 5px !important;\n  }\n  .message{\n    position: relative;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    font-size: 16px;\n  }\n  .message-font{\n    font-size: 13px;\n  }\n</style>"],"mappings":"AA+CA,SAAAA,UAAA;AACA,SAAAC,EAAA;AAEA;EACAC,KAAA;IACA;MACAC,KAAA;MACAC,EAAA,EAAAC,YAAA,CAAAC,OAAA;MACAC,QAAA,EAAAF,YAAA,CAAAC,OAAA;MACAE,IAAA;MACAC,KAAA;MACAC,UAAA;MACAC,QAAA,GACA;QAAAC,GAAA;QAAAR,EAAA;MAAA,GACA;QAAAQ,GAAA;QAAAR,EAAA;MAAA,GACA;QAAAQ,GAAA;QAAAR,EAAA;MAAA,EACA;MACAS,MAAA;IAEA;EACA;EACAC,KAAA;IACAH,SAAAI,MAAA;MACAC,OAAA,CAAAC,GAAA,CAAAF,MAAA;IACA;EACA;EACAG,QAAA;IACA,KAAAL,MAAA,GAAAZ,EAAA;IACA,KAAAkB,QAAA;IACA,KAAAC,WAAA;EACA;EACAC,cAAA,EACA;IACA,KAAAC,UAAA;EACA;EACAC,OAAA;IACAJ,SAAA;MACAnB,UAAA,CACAwB,GAAA,mBAAApB,EAAA,IACAqB,IAAA,CAAAC,GAAA;QACA,KAAAjB,KAAA,OAAAiB,GAAA,CAAAxB,IAAA,CAAAM,IAAA;MACA,GACAmB,KAAA,CAAAC,GAAA;QACAZ,OAAA,CAAAC,GAAA,CAAAW,GAAA;MACA;IACA;IACAC,WAAAC,GAAA;MACA,KAAAtB,IAAA,QAAAC,KAAA,CAAAsB,IAAA,CAAAvB,IAAA,IAAAA,IAAA,CAAAJ,EAAA,KAAA0B,GAAA;MACA,KAAA3B,KAAA,GAAA2B,GAAA;MACA,KAAAE,QAAA,CAAAF,GAAA;IACA;IACAE,SAAAC,SAAA;MACA,KAAApB,MAAA,CAAAqB,IAAA,iBAAA9B,EAAA,WAAA6B,SAAA;IACA;IACAb,YAAA;MACA,KAAAP,MAAA,CAAAsB,EAAA,mBAAAC,OAAA;QACA,KAAAzB,QAAA,YAAAA,QAAA,EAAAyB,OAAA;MACA;IACA;IACAC,YAAA,EACA;MACA,UAAA3B,UAAA;MACA,KAAAG,MAAA,CAAAqB,IAAA;QAAAtB,GAAA,OAAAF,UAAA;QAAAN,EAAA,OAAAA;MAAA;MACA,KAAAM,UAAA;IACA;IACAY,WAAA,EACA;MACA,SAAAT,MAAA,OAAAA,MAAA,CAAAS,UAAA;IACA;EACA;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}